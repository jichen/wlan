package com.cmct.portal.portalmanagement.controller;

import java.util.Collection;
import java.util.Date;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;


import com.cmct.portal.po.AuthRulePO;
import com.cmct.portal.po.BlacklistPO;
import com.cmct.portal.service.AuthRuleService;
import com.cmct.portal.service.BLackListService;
import com.cmct.common.util.AbstractController;



@Controller
@RequestMapping("/portalmanagement/rules")
public class RulesController extends AbstractController {
	
	private static String REL_ID = "ruleadd";
	
	@Autowired
	private AuthRuleService authRuleService;
	
	@Autowired
	private BLackListService blackListService;	
	

	/**
	 * Ԥ���
	 */
	@RequestMapping(value = "/preadd")
	public ModelAndView preAdd() throws Exception {
		Collection<AuthRulePO> list=authRuleService.getAll();
		AuthRulePO ar=null;
		for(AuthRulePO arPO:list){
			ar=new AuthRulePO();
			ar.setId(arPO.getId());
			ar.setAuth_interval(arPO.getAuth_interval());
			ar.setIs_only_client(arPO.getIs_only_client());
			ar.setTime(arPO.getTime());
		}
		Collection<BlacklistPO> bllist=blackListService.getAll();
		String blacklist="";
		for(BlacklistPO blPO:bllist){
			if(blacklist.length()>0){
				blacklist=blacklist+"\r\n";
			}
			blacklist=blacklist+blPO.getUsername();
		}
		
		ModelAndView mav = new ModelAndView("pages/view/portalmanagement/rules/add");
		mav.addObject("bean", ar);
		mav.addObject("blacklist", blacklist);
		return mav;
	}


	@RequestMapping(value = "/add")
	@ResponseBody
	public String add(AuthRulePO bean,String sql,HttpServletRequest request){

		if(!(bean.getIs_only_client()==null))
			bean.setIs_only_client("1");
		else
			bean.setIs_only_client("0");
		
		
		String blacklist=request.getParameter("blacklist");
		String blstr[]=blacklist.split("\r\n");

		
		sql=blacklist;
		int i=authRuleService.countRow();
		if(i>0){
			authRuleService.updateAuthRule(bean);
		}else{
			authRuleService.saveAuthRule(bean);
		}
		if(blstr.length>0){
			for(int k=0;k<blstr.length;k++){
				
				if(!isNumber(blstr[k])){
					String msg1="黑名单中有非法字符!";
					//msg1=new String(msg1.getBytes("GBK"),request.getCharacterEncoding());

					
					return ajaxDoneError(msg1);
				}
				
			}
			
			
		
			//全部删除操作
			Collection<BlacklistPO> bllist=blackListService.getAll();
			BlacklistPO bl=null;
			for(BlacklistPO blPO:bllist){
				bl=new BlacklistPO();
				bl.setId(blPO.getId());
				bl.setCreatetime(blPO.getCreatetime());
				bl.setUsername(blPO.getUsername());
				blackListService.deleteBL(bl);
			}
			//重新插入操作
			Date date=new Date();
			
			for(int j=0;j<blstr.length;j++){
				BlacklistPO bl1=new BlacklistPO();
				bl1.setCreatetime(date);
				bl1.setUsername(blstr[j]);
				blackListService.saveBL(bl1);
			}
			
		}

		return ajaxDoneSuccess(" ", false, REL_ID);
	}

	
	public static boolean isNumber(String str){
		Pattern pattern=Pattern.compile("[0-9]*");
		return pattern.matcher(str).matches();
		
	}

}
