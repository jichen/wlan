package com.cmct.portal.login.controller;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.subject.Subject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.util.WebUtils;

import com.cmct.common.Constants;
import com.cmct.common.annotation.Log;
import com.cmct.common.shiro.ShiroDbRealm;
import com.cmct.common.shiro.URLAuthorizationFilter;
import com.cmct.common.util.AbstractController;
import com.cmct.portal.po.UserPO;
import com.cmct.portal.service.UserService;

@Controller
public class LoginController extends AbstractController {
	

	private static Logger logger = LoggerFactory.getLogger(URLAuthorizationFilter.class);
	
	@Autowired
	private UserService userService;
		
	@Log(module = Constants.MODULE_LOGIN_SYSTEM, function = Constants.Funtion_Login, isSign = true)
	@RequestMapping(value = "/submit")
	@ResponseBody
	public Map<String,Object> submit(@RequestParam String username, @RequestParam String password,
			HttpServletRequest request,HttpServletResponse response,HttpSession session) {
		Map<String,Object> rs = new HashMap<String,Object>();
		logger.debug("***************************************");
		logger.debug("submit...");
		logger.debug("***************************************");
		if (StringUtils.isEmpty(username) || StringUtils.isEmpty(password)) {
			rs.put("status", 0);
			rs.put("msg", "用户密，密码不能为空");
			return rs;
		}
		UserPO user = userService.findOne(username);
		if(user==null){
			rs.put("status", 0);
			rs.put("msg", "帐号不存在");
			return rs;
		}else if(!user.getPwd().equals(password)){
			rs.put("status", 0);
			rs.put("msg", "密码错误");
			return rs;
		}
		WebUtils.setSessionAttribute(request, Constants.PORTAL_LOGIN_USER,user);
		Subject subject = SecurityUtils.getSubject();
		UsernamePasswordToken token = new UsernamePasswordToken(username, password);
		subject.login(token);
		session.setAttribute("_screenName", user.getUsername());
		rs.put("status", 1);
		return rs;
	}
	
	/**
	 * 登录引导页
	 * @return
	 */
	@RequestMapping(value = "/index")
	@ResponseBody
	public ModelAndView index(HttpSession session,HttpServletRequest request) {
		//跳转主页面
		ModelAndView mav = new ModelAndView("pages/view/index");
		// 返回
		return mav;
	}
	
	
	/*public ModelAndView submit(HttpServletRequest request,HttpServletResponse response,HttpSession session) throws Exception {
		Map<String, String> login=new HashMap<String, String>();
		String username=request.getParameter("username");
		String password=request.getParameter("password");
		login.put("username",username);
		login.put("pwd",password);
		
		UserPO user=userService.ByLogin(login);
		Map mp=new HashMap();
		if(null == user){
			mp.put("status", 0);
			mp.put("msg", "账号/密码错误");
			return new ModelAndView("/login",mp);
		}else{

			mp.put("status", 1);
			mp.put("user", user);
			WebUtils.setSessionAttribute(request, Constants.PORTAL_LOGIN_USER,user);
			Subject subject = SecurityUtils.getSubject();
			UsernamePasswordToken token = new UsernamePasswordToken(username, password);
			subject.login(token);
			session.setAttribute("_screenName",user.getUsername());
			return new ModelAndView("/pages/view/index",mp);
		}
	}	
	*/

	@RequestMapping(value = "/exit")
	public ModelAndView exit(HttpSession session) {
		SecurityUtils.getSubject().logout();
		return new ModelAndView("/login");
	}
	
	@RequestMapping("/timeout")
	@ResponseBody
	public String timeout() {
		return ajaxDoneTimeout();
	}

}
