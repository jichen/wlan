package com.cmct.portal.dao;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.hibernate.Criteria;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;


public class HibernateDao<T, ID extends Serializable> {

	private Class<T> entityClass;

	@Autowired
	protected SessionFactory sessionFactory;

	public Session getSession() {
		return sessionFactory.getCurrentSession();
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public HibernateDao() {
		Type genType = getClass().getGenericSuperclass();
		Type[] params = ((ParameterizedType) genType).getActualTypeArguments();
		entityClass = (Class) params[0];
	}



	@SuppressWarnings("unchecked")
	public <E> List<E> find(Class<E> clazz, Map<String, Object> propertiesMap, int start, int limit) {
		Session session = getSession();
		Criteria criteria = session.createCriteria(clazz);
		if (propertiesMap != null && propertiesMap.keySet() != null) {
			for (String property : propertiesMap.keySet()) {
				criteria.add(Restrictions.eq(property, propertiesMap.get(property)));
			}
		}
		criteria.setFirstResult(start);
		criteria.setMaxResults(limit);
		return (List<E>) criteria.list();
	}

	@SuppressWarnings("unchecked")
	public <E> List<E> findWithoutPage(Class<E> clazz, Map<String, Object> propertiesMap) {
		Session session = getSession();
		Criteria criteria = session.createCriteria(clazz);
		if (propertiesMap != null && propertiesMap.keySet() != null) {
			for (String property : propertiesMap.keySet()) {
				criteria.add(Restrictions.eq(property, propertiesMap.get(property)));
			}
		}
		return (List<E>) criteria.list();
	}



	public List<T> find(Map<String, Object> propertiesMap, int start, int limit) {

		return find(entityClass, propertiesMap, start, limit);
	}



	
	public List<T> find(Map<String, Object> propertiesMap) {
		return this.findWithoutPage(entityClass, propertiesMap);
	}



	public List<T> find(Map<String, Object> propertiesMap, List<String[]> orderBies) {
		return this.findWithoutPage(entityClass, propertiesMap, orderBies);
	}

	@SuppressWarnings("unchecked")
	public <E> List<E> findWithoutPage(Class<E> clazz, Map<String, Object> propertiesMap, List<String[]> orderBies) {
		Session session = getSession();
		Criteria criteria = session.createCriteria(clazz);
		if (propertiesMap != null && propertiesMap.keySet() != null) {
			for (String property : propertiesMap.keySet()) {
				criteria.add(Restrictions.eq(property, propertiesMap.get(property)));
			}
		}

		if (orderBies != null) {
			for (String[] orderby : orderBies) {
				String columnName = orderby[0];
				String orderType = orderby[1];
				if (orderType.equals("asc")) {
					criteria.addOrder(Order.asc(columnName));
				} else {
					criteria.addOrder(Order.desc(columnName));
				}
			}
		}
		return (List<E>) criteria.list();
	}



	
	public List<T> findAll() {
		return find(null);
	}

	

	@SuppressWarnings("unchecked")
	public <E> E find(Class<E> clazz, Serializable id) {
		Session session = getSession();
		return (E) session.get(clazz, id);
	}



	public T get(ID id) {
		return find(entityClass, id);
	}



	
	public Serializable save(Object entity) {
		Session session = getSession();
		return session.save(entity);
	}



	
	public void delete(ID id) {
		Session session = getSession();
		T t = get(id);
		if (null != t) { 
		}
	}



	
	public void delete(Object entity) {
		Session session = getSession();
		session.delete(entity);
	}



	
	public void update(Object entity) {
		Session session = getSession();
		session.update(entity);
	}

	

	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	protected <E> List<E> pageQuery(Class<E> clazz, String sql, Map<String, Object> propertiesMap, int start, int limit) {
		Session session = getSession();
		Query query = session.createQuery(sql);
		if (propertiesMap != null) {
			for (Entry<String, Object> entry : propertiesMap.entrySet()) {
				if (entry.getValue() instanceof Object[]) {
					query.setParameterList(entry.getKey(), (Object[]) entry.getValue());
				} else if (entry.getValue() instanceof Collection) {
					query.setParameterList(entry.getKey(), (Collection) entry.getValue());
				} else {
					query.setParameter(entry.getKey(), entry.getValue());
				}
			}
		}
		query.setFirstResult(start);
		query.setMaxResults(limit);
		return query.list();
	}



	
	protected <E> List<E> pageQuery(Class<E> clazz, String sql, int start, int limit) {
		return pageQuery(clazz, sql, null, start, limit);
	}



	protected List<T> pageQuery(String sql, Map<String, Object> propertiesMap, int start, int limit) {
		return pageQuery(entityClass, sql, propertiesMap, start, limit);
	}



	protected List<T> pageQuery(String sql, int start, int limit) {
		return pageQuery(entityClass, sql, start, limit);
	}



	protected Integer getTotalCount(String sql) {
		return getTotalCount(sql, null);
	}



	@SuppressWarnings("rawtypes")
	protected Integer getTotalCount(String sql, Map<String, Object> propertiesMap) {
		Session session = getSession();
		Query query = session.createQuery(sql);
		if (propertiesMap != null) {
			for (Entry<String, Object> entry : propertiesMap.entrySet()) {
				if (entry.getValue() instanceof Object[]) {
					query.setParameterList(entry.getKey(), (Object[]) entry.getValue());
				} else if (entry.getValue() instanceof Collection) {
					query.setParameterList(entry.getKey(), (Collection) entry.getValue());
				} else {
					query.setParameter(entry.getKey(), entry.getValue());
				}
			}
		}
		return ((Number) query.uniqueResult()).intValue();
	}

}
