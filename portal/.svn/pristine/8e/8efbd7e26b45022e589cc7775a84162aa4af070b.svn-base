package com.cmct.portal.authenticate.controller;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.NameValuePair;
import org.apache.commons.httpclient.methods.PostMethod;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.cmct.common.util.PropertyConfigureHandler;
import com.cmct.portal.po.ACPO;
import com.cmct.portal.po.AuthRulePO;
import com.cmct.portal.po.SMSPWDLogPO;
import com.cmct.portal.po.WLANUSERLogPO;
import com.cmct.portal.service.ACService;
import com.cmct.portal.service.AuthRuleService;
import com.cmct.portal.service.BLackListService;
import com.cmct.portal.service.SMSPWDLogService;
import com.cmct.portal.service.UserService;
import com.cmct.portal.service.WLANUSERLogService;
import com.cmct.portal.interfaces.exception.PortalException;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;


@Controller
@RequestMapping(value = "/authenticate")
public class AuthController {

	@Autowired
	private AuthRuleService authRuleService;
	
	@Autowired
	private ACService acService;
	
	@Autowired
	private BLackListService blackListService;
	
	@Autowired
	private SMSPWDLogService smsPWDLogService; 
	
	@Autowired
	private WLANUSERLogService wUSERLogService;
			
	@RequestMapping(value = "/authPage")
	public String createPage(HttpServletRequest request,HttpServletResponse resp) throws IOException, TemplateException {
		String userAgent = request.getHeader("user-agent").toLowerCase();
		if (userAgent.contains("iphone") || userAgent.contains("ipad") || userAgent.contains("android")) {
			return "/pages/authenticate/mobileAuth";
		} else {
			return "/pages/authenticate/pcAuth";
		}
	}
	
	@RequestMapping(value = "/dynamic")
	@ResponseBody
	public  Map<String,Object> dynamic(HttpServletRequest request,HttpServletResponse response,String username) throws HttpException, IOException {

		//判断用户是否存在于黑名单中
		Map<String,Object> rs = new HashMap<String,Object>();
		//对用户名进行判断是否存在于黑白名单中
		if(blackUser(username)){
			rs.put("status","0");
			rs.put("msg", "您被加入了黑名单，请与服务方联系。");
			return rs;
		}else{
			//获取认证的规则，以后要修改的			
			List<AuthRulePO> list=authRuleService.getAll();
			AuthRulePO arPO=list.get(0);
			//密码有效期
			String validtime=arPO.getTime().toString();
			//重复申请间隔
			String repeat=arPO.getAuth_interval().toString();
			
			String result=howMuchTime(username, repeat);
			//判断是否可以进行重复申请了
			if(!result.equals("Y")){
				rs.put("status","3");
				rs.put("msg", result);
				return rs;
			}else{
				//申请动态密码
				SMSPWDLogPO bean=new SMSPWDLogPO();
				bean.setUsername(username);
				HttpClient client = new HttpClient();
				//从配置文件中获取接口地址
				String path = (String)PropertyConfigureHandler.getCtxPropertiesMap().get("dynamic");
				PostMethod pm = new PostMethod(path);
				NameValuePair[] vp = {
						new NameValuePair("username",username),
						new NameValuePair("validtime",validtime)
					};		
				pm.addParameters(vp);
				/*
				 *  一个参数
				 * 		 
				NameValuePair vp = new NameValuePair();
				vp.setName("username");
				vp.setValue(username);
				pm.setQueryString(new NameValuePair[]{vp});
				*/			
				int Status=client.executeMethod(pm);
				//判断密码是否申请成功
				if(Status==HttpStatus.SC_OK){
					bean.setDatetime(new Date());
					bean.setResult("Y");
					smsPWDLogService.save(bean);
					rs.put("status","2");
					rs.put("msg", arPO.getAuth_interval().toString());
					return rs;
					//记录成功的log

				}else{
					//记录失败的log
					bean.setDatetime(new Date());
					bean.setResult("N");
					smsPWDLogService.save(bean);
					rs.put("status","1");
					rs.put("msg", "系统错误请与服务方联系。");
					return rs;
				}
			}
		}
	}
	

	//联网登录验证 
	@RequestMapping(value = "/overdue")
	@ResponseBody
	public Map<String,Object> isoverdue(String username,String password,String userip,
			HttpServletRequest request,HttpServletResponse response,HttpSession session) throws HttpException, IOException {
		Map<String,Object> rs = new HashMap<String,Object>();
		
		//对用户名进行判断是否存在于黑白名单中
		if(blackUser(username)){
			rs.put("status","2");
			rs.put("msg", "您没有任何权限登录。");
			return rs;
		}
		
		Date now=new Date();
		//获取客户端IP
		//String userip=request.getRemoteAddr();
		WLANUSERLogPO po = new WLANUSERLogPO();
		po.setAuthtime(now);
		po.setUsername(username);
		po.setUserip(userip);
		//进入认证流程
		try {
			Map<String,Object> result=new HashMap<String, Object>();
			//获取ACIP
			String acIP="";
			String sql=" from ACPO where 1=1  and isdelete= :isdelete order by id ";
			Map propertiesMap =new HashMap();
			propertiesMap.put("isdelete","N");
			List<ACPO> acs=acService.findPages_sql(sql, propertiesMap, 0, 10);
			if(null != acs && acs.size()>0){
				ACPO ac=acs.get(0);
				acIP=ac.getIp();
			}
			result=com.cmct.portal.interfaces.radius.PortaltoRadius.wlanLogin(acIP,userip,username,password);
			//对result进行判断，以及添加log
			//目前无法获取
			
			//po.setApid("");
			po.setAuthresult("OK");
			wUSERLogService.save(po);
			//将数据放入session中
			session.setAttribute("username", username);
			session.setAttribute("password", password);				
			session.setAttribute("userip", result.get("userip"));
			session.setAttribute("serialNo", result.get("serialNo"));
			session.setAttribute("reqID", result.get("reqID"));
			rs.put("status","0");
			rs.put("msg", "登陆成功");
			return rs;
		} catch (PortalException e) {
			//po.setApid("");
			po.setAuthresult("NO");
			wUSERLogService.save(po);
			rs.put("status","1");
			rs.put("msg", "密码过期，请重新获取");
			e.printStackTrace();
			return rs;
		}
	}
	
	//联网退出
	@RequestMapping(value = "/wLanExit")
	@ResponseBody
	public Map<String,Object> wLanExit(HttpServletRequest request,HttpServletResponse response,
			HttpSession session,String userip) throws HttpException, IOException {
		Map<String,Object> rs = new HashMap<String,Object>();
		if(session!=null){
			try {
				Map<String,Object> result=new HashMap<String, Object>();
				String userIP=(String) session.getAttribute("userip");
				//获取ACIP(根据获取的信息，判断那个ac都数据库查询该AC的配置信息)
				String acIP="";
				String sql=" from ACPO where 1=1  and isdelete= :isdelete order by id ";
				Map propertiesMap =new HashMap();
				propertiesMap.put("isdelete","N");
				List<ACPO> acs=acService.findPages_sql(sql, propertiesMap, 0, 10);
				if(null != acs && acs.size()>0){
					ACPO ac=acs.get(0);
					acIP=ac.getIp();
				}
				result=com.cmct.portal.interfaces.radius.PortaltoRadius.wlanExit(acIP, userIP);
				Date now=new Date();
				//判断返回值
				String code=(String) result.get("code");
				if(code.equals("0")){
					rs.put("status","0");
					rs.put("msg", "下线成功。");
					String username=(String) session.getAttribute("username");
					WLANUSERLogPO po=wUSERLogService.findNewOne(username, userIP);
					if(po!=null){
						po.setExittime(now);
						po.setExitway("1");
						//分钟
						long time = (now.getTime()-po.getAuthtime().getTime())/1000/60;
						String time1=time+"";
						Integer time2=Integer.valueOf(time1);
						po.setOnlinetime(time2+"");
						wUSERLogService.update(po);
					}
				}else if(code.equals("1")){
					rs.put("status","1");
					rs.put("msg", "下线被系统拒绝。");
				}else if(code.equals("2")){
					rs.put("status","2");
					rs.put("msg", "下线失败。");
				}else if(code.equals("3")){
					rs.put("status","3");
					rs.put("msg", "系统异常请尽快联系服务方。");
				}
				return rs;
			} catch (PortalException e) {
				e.printStackTrace();
				rs.put("status","3");
				rs.put("msg", "系统异常请尽快联系服务方。");
				return rs;
			}
		}else{
			rs.put("status","3");
			rs.put("msg","系统异常请尽快联系服务方。");
			return rs;
			
		}
	}
	
	//判断是否存在黑名单中
	public Boolean blackUser(String username){
		if(username != null && username.trim()!=""){
			return blackListService.findOneofUsername(username.trim());
		}else{
			//用户名为null或是不合法
			return true;
		}
	}
	//判断是否可以重新获取动态密码了
	public String howMuchTime(String username,String repeat){
		//规则规定的间隔时间（秒）
		Integer repeattime=Integer.valueOf(repeat)*60;
		SMSPWDLogPO po=smsPWDLogService.findNewOne(username);
		if(po==null){
			return "Y";
		}
		Date nowTime=new Date();
		//目前已经间隔的时间
		long a=(nowTime.getTime()-po.getDatetime().getTime())/1000;
		//判断是否已经可以进行申请了
		if(a>repeattime){
			return "Y";
		}else{
			a=repeattime-a;
			return a+"";
		}
		
		
	}	
	
}
